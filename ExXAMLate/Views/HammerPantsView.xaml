<common:LayoutAwarePage
    x:Name="pageRoot"
    x:Class="ExXAMLate.Views.HammerPantsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:common="using:ExXAMLate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ColourPicker="using:VikingCode.ColourPicker" mc:Ignorable="d">


    <!--
        This grid acts as a root panel for the page that defines two rows:
        * Row 0 contains the back button and page title
        * Row 1 contains the rest of the page layout
    -->
    <Grid Style="{StaticResource LayoutRootStyle}"  Background="{StaticResource BackgroundBrush}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="120"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="140"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Back button and page title -->
        <Grid Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="backButton" Command="{Binding GoBack}" IsEnabled="{Binding Frame.CanGoBack, ElementName=pageRoot}" Style="{StaticResource BackButtonStyle}"/>
            <TextBlock x:Name="pageTitle" Grid.Column="1" Text="Insta-XAML customisation" Style="{StaticResource PageHeaderTextStyle}" FontFamily="Assets/fighting spirit TBS.ttf#Fighting Spirit TBS"/>
        </Grid>
        <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.Column="1" VerticalAlignment="Top">
            <StackPanel Background="#FF009BBD"  Width="400" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <TextBlock Text="Did you know that..." Style="{StaticResource SubheaderTextStyle}" Margin="10" />
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BodyTextStyle}" Margin="10">
            <Span>WinRT XAML lacks "DynamicResource" found in WPF. Most controls use the default "accent" colour, which is a vibrant purple. This means if you want to customise a system control - even if its just a single colour you want to change - you have to completely reimplement the style for it.</Span><LineBreak /><LineBreak />
            <Span>That sucks.</Span><LineBreak /><LineBreak />
            <Span>With this tool, you can punch in a colour value, and a new ResourceDictionary will be spat out, allowing you to quickly and easily 'brand' all the controls to your colour.</Span>
                </TextBlock>

            </StackPanel>
            <ColourPicker:ColourPicker Width="400" Height="400" x:Name="picker" SelectedColour="{Binding SelectedColor, Mode=TwoWay}" />
            <Rectangle Fill="{Binding ElementName=picker, Path=SelectedBrush}" Width="50" Height="50" VerticalAlignment="Top" />
            
        </StackPanel>

        <Button Content="Generate" Margin="0,335,0,255" Grid.Row="1" Grid.Column="1" Command="{Binding Generate}" />

        <Grid x:Name="noSnapped" Background="#FF009BBD" Grid.ColumnSpan="2" Grid.RowSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <Image Source="/assets/Logo.png" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" />
                <StackPanel Orientation="Horizontal">
                    <Button Style="{StaticResource NextAppBarButtonStyle}" AutomationProperties.Name="" Click="Button_Click_1" Margin="-20" />
                    <TextBlock Text="Insta-XAML needs to be fullscreen" Style="{StaticResource BasicTextStyle}"/>
                </StackPanel>
                 
               
            </StackPanel>
            
        </Grid>
        <VisualStateManager.VisualStateGroups>

            <!-- Visual states reflect the application's view state -->
            <VisualStateGroup x:Name="ApplicationViewStates">
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>

                <!-- The entire page respects the narrower 100-pixel margin convention for portrait -->
                <VisualState x:Name="FullScreenPortrait">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PortraitBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>

                <!-- The back button and title have different styles when snapped -->
                <VisualState x:Name="Snapped">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="pageTitle" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedPageHeaderTextStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="noSnapped" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="Visible"/>
                        </ObjectAnimationUsingKeyFrames>
                        
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</common:LayoutAwarePage>
